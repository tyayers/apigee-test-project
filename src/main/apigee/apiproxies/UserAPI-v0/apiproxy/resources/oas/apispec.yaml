openapi: 3.0.0
info:
  title: User Management API
  description: >-
    API to manage users, including creating, updating, deleting, and viewing
    user data. The API supports managing user properties such as first name,
    last name, email, address, and user groups.
  version: 1.0.0
  contact:
    name: Train Support
    url: https://example.com/support
paths:
  /users:
    get:
      description: Get a list of all users.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal Server Error
      security:
        - OAuth2:
            - write
      tags:
        - users
    post:
      description: Create a new user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User created successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Bad request.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error.
      security:
        - OAuth2:
            - write
      tags:
        - users
  /users/{userId}:
    delete:
      description: Delete a specific user.
      operationId: deleteUser
      responses:
        '200':
          description: The user was deleted successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: The user was not found.
      security:
        - OAuth2:
            - write
      tags:
        - users
    get:
      description: Get the details of a specific user.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Not Found
      security:
        - OAuth2:
            - write
      tags:
        - users
    parameters:
      - in: path
        name: userId
        required: true
        schema:
          $ref: '#/components/schemas/UserId'
    put:
      description: Update the details of a specific user.
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Bad request.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: User not found.
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: Internal server error.
      security:
        - OAuth2:
            - write
      tags:
        - users
components:
  schemas:
    User:
      description: A user in the system.
      properties:
        address:
          description: The address of the user.
          type: string
        email:
          description: The email address of the user.
          type: string
        firstName:
          description: The first name of the user.
          type: string
        lastName:
          description: The last name of the user.
          type: string
        userGroups:
          description: The user groups that the user belongs to.
          items:
            type: string
          type: array
      type: object
    UserId:
      description: The unique identifier of the user.
      properties:
        id:
          description: The unique identifier of the user.
          type: string
      type: object
    error:
      description: Error message.
      properties:
        errorMessage:
          description: Error message.
          type: string
      type: object
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth 2.0 authorization code following RFC8725 best practices.
      flows:
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Read access
            write: Write access
